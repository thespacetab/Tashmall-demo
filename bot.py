import asyncio
import requests
import bcrypt
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)

API_TOKEN = "7985144948:AAHAbF3p4TifpfI_NRwFSWTDJQEWvhwX4Es"
BACKEND_API_URL = "http://localhost:8000/api"
TASHMALL_WEBAPP_URL = "https://tashmall-project.vercel.app/"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def api_get_users_by_telegram_id(telegram_id):
    resp = requests.get(f"{BACKEND_API_URL}/user/{telegram_id}")
    if resp.status_code == 200:
        users = resp.json()
        if isinstance(users, list):
            return users
        return []
    return []

def api_get_user_by_username(username):
    resp = requests.get(f"{BACKEND_API_URL}/user_by_username/{username}")
    if resp.status_code == 200:
        return resp.json()
    return None

def api_create_user(telegram_id, name, password, role):
    hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    resp = requests.post(f"{BACKEND_API_URL}/user", json={
        "telegram_id": telegram_id, "name": name, "role": role, "password": hashed
    })
    return resp.status_code == 201

def api_delete_user(telegram_id):
    resp = requests.delete(f"{BACKEND_API_URL}/user/{telegram_id}")
    return resp.status_code == 204

def api_check_password(username, password):
    user = api_get_user_by_username(username)
    if not user or 'password' not in user:
        return False, None
    return bcrypt.checkpw(password.encode(), user['password'].encode()), user

def api_create_shop(owner_telegram_id, name):
    resp = requests.post(f"{BACKEND_API_URL}/shops", json={
        "owner_telegram_id": owner_telegram_id,
        "name": name
    })
    return resp.status_code == 201

def start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), KeyboardButton(text="–í–æ–π—Ç–∏")]
        ],
        resize_keyboard=True
    )

def account_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'), KeyboardButton(text='–í—ã–π—Ç–∏')]
        ],
        resize_keyboard=True
    )

def role_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å'), KeyboardButton(text='–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü')]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def seller_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí Tashmall", web_app=WebAppInfo(url=TASHMALL_WEBAPP_URL))
        ],
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="create_shop"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="my_shops")
        ]
    ])

def buyer_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí Tashmall", web_app=WebAppInfo(url=TASHMALL_WEBAPP_URL))
        ],
        [
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="find_product"),
            InlineKeyboardButton(text="üè¨ –°–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="see_shops")
        ]
    ])

user_state = {}

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    telegram_id = message.from_user.id
    users = api_get_users_by_telegram_id(telegram_id)
    state = user_state.get(telegram_id, {})
    if users and not state.get("auth", False):
        names = ", ".join([u['name'] for u in users])
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ Tashmall!\n\n–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã: {names}\n–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –ø–æ–∫—É–ø–æ–∫!",
            reply_markup=start_keyboard()
        )
        return
    if users and state.get("auth", False):
        user = users[0]
        await message.answer(
            f"üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']}!\n–í–∞—à–∞ —Ä–æ–ª—å: {user['role']}\n\n–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º?",
            reply_markup=account_keyboard()
        )
        await show_role_menu(message, user['role'])
        return
    await message.answer(
        "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ Tashmall ‚Äî –º–∞–≥–∞–∑–∏–Ω–µ –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!\n\n–ì–æ—Ç–æ–≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard()
    )

@dp.message(lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def delete_account(message: types.Message):
    telegram_id = message.from_user.id
    ok = api_delete_user(telegram_id)
    user_state.pop(telegram_id, None)
    if ok:
        await message.answer("–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")

@dp.message(lambda m: m.text == "–í—ã–π—Ç–∏")
async def logout(message: types.Message):
    telegram_id = message.from_user.id
    user_state[telegram_id] = {"auth": False}
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=ReplyKeyboardRemove())

@dp.message(lambda m: m.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def registration_start(message: types.Message):
    telegram_id = message.from_user.id
    users = api_get_users_by_telegram_id(telegram_id)
    state = user_state.get(telegram_id, {})
    if users and state.get("auth", False):
        user = users[0]
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç!", reply_markup=account_keyboard())
        await show_role_menu(message, user['role'])
        return
    if len(users) >= 3:
        await message.answer("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (3) –¥–ª—è —ç—Ç–æ–≥–æ Telegram ID.")
        return
    user_state[telegram_id] = {"step": "register_name"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")

@dp.message(lambda m: m.text == "–í–æ–π—Ç–∏")
async def login_start(message: types.Message):
    telegram_id = message.from_user.id
    user_state[telegram_id] = {"step": "login_name"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

async def show_role_menu(message, role):
    if role == "seller":
        await message.answer(
            "–ú–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞:\n‚Äî –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã\n‚Äî –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n‚Äî –°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã",
            reply_markup=seller_menu()
        )
    else:
        await message.answer(
            "–ú–µ–Ω—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n‚Äî –ò—â–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n‚Äî –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã\n‚Äî –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –ø–æ–∫—É–ø–∫–∏",
            reply_markup=buyer_menu()
        )

@dp.callback_query(lambda c: c.data == "create_shop")
async def create_shop_callback(callback: types.CallbackQuery):
    telegram_id = callback.from_user.id
    user_state[telegram_id] = {"step": "shop_name"}
    await callback.message.answer("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º:")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_shops")
async def my_shops_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "find_product")
async def find_product_callback(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "see_shops")
async def see_shops_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
    await callback.answer()

@dp.message()
async def global_handler(message: types.Message):
    telegram_id = message.from_user.id
    st = user_state.get(telegram_id, {})
    step = st.get("step")

    if step == "register_name":
        if api_get_user_by_username(message.text):
            await message.answer("–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ:")
            return
        st["name"] = message.text
        st["step"] = "register_password"
        user_state[telegram_id] = st
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return

    if step == "register_password":
        st["password"] = message.text
        st["step"] = "register_role"
        user_state[telegram_id] = st
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_keyboard())
        return

    if step == "register_role":
        if message.text not in ["–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", "–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
            return
        role = "buyer" if message.text == "–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å" else "seller"
        st["role"] = role
        ok = api_create_user(
            telegram_id=telegram_id,
            name=st["name"],
            password=st["password"],
            role=role
        )
        if ok:
            user_state[telegram_id] = {"auth": True}
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tashmall.", reply_markup=account_keyboard())
            await show_role_menu(message, role)
        else:
            user_state.pop(telegram_id, None)
            await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ 3 –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∏–º—è –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start.")
        return

    if step == "login_name":
        st["name"] = message.text
        st["step"] = "login_password"
        user_state[telegram_id] = st
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return

    if step == "login_password":
        username = st.get("name")
        password = message.text
        success, user = api_check_password(username, password)
        if success:
            user_state[telegram_id] = {"auth": True}
            await message.answer(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!\n–ò–º—è: {user['name']}\n–†–æ–ª—å: {user['role']}",
                reply_markup=account_keyboard()
            )
            await show_role_menu(message, user['role'])
        else:
            user_state[telegram_id] = {"auth": False}
            await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start.")
        return

    if step == "shop_name":
        shop_name = message.text.strip()
        ok = api_create_shop(telegram_id, shop_name)
        if ok:
            await message.answer(f'–ú–∞–≥–∞–∑–∏–Ω "{shop_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞.")
        user_state[telegram_id] = {"auth": True}
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

async def main():
    try:
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")