import telebot
from telebot import types
import requests
import json
from datetime import datetime, timedelta
import os

# Configuration
BOT_TOKEN = "7779332599:AAFQ6K9GpYmKSoHwq8F3BmUrDGDOs9yAmyk"
API_BASE = "http://localhost:8000/api"

bot = telebot.TeleBot(BOT_TOKEN)

# User states for conversation flow
user_states = {}

class UserState:
    def __init__(self):
        self.state = "main"
        self.data = {}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]

# Main menu keyboard
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω—ã"),
        types.KeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        types.KeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    )
    return keyboard

# Admin keyboard
def get_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
        types.KeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        types.KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"),
        types.KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )
    return keyboard

# Start command
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Commercio!

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–æ–º.

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
    """
    
    bot.reply_to(message, welcome_text, reply_markup=get_main_keyboard())
    
    # Check if user exists in database
    try:
        response = requests.get(f"{API_BASE}/user/{user_id}")
        if response.status_code == 404:
            # User doesn't exist, offer registration
            register_keyboard = types.InlineKeyboardMarkup()
            register_keyboard.add(
                types.InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
            )
            bot.send_message(message.chat.id, 
                           "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                           reply_markup=register_keyboard)
    except:
        pass

# Handle main menu buttons
@bot.message_handler(func=lambda message: message.text in ["üè™ –ú–∞–≥–∞–∑–∏–Ω—ã", "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚ùì –ü–æ–º–æ—â—å"])
def handle_main_menu(message):
    user_id = message.from_user.id
    
    if message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω—ã":
        show_shops(message)
    elif message.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        show_events(message)
    elif message.text == "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã":
        show_partners(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(message)
    elif message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        show_help(message)

# Show shops
def show_shops(message):
    try:
        response = requests.get(f"{API_BASE}/shops")
        shops = response.json()
        
        if not shops:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return
        
        text = "üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n"
        for shop in shops[:5]:  # Show first 5 shops
            text += f"üì¶ {shop['name']}\n"
            if shop.get('description'):
                text += f"   {shop['description'][:50]}...\n"
            text += f"   ID: {shop['id']}\n\n"
        
        if len(shops) > 5:
            text += f"... –∏ –µ—â–µ {len(shops) - 5} –º–∞–≥–∞–∑–∏–Ω–æ–≤"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω", callback_data="search_shop"),
            types.InlineKeyboardButton("üìã –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="all_shops")
        )
        
        bot.reply_to(message, text, reply_markup=keyboard)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {str(e)}")

# Show events
def show_events(message):
    try:
        response = requests.get(f"{API_BASE}/events")
        events = response.json()
        
        if not events:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        
        text = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for event in events[:3]:  # Show first 3 events
            date = datetime.strptime(event['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            text += f"üéØ {event['title']}\n"
            text += f"üìÖ {date} –≤ {event['time']}\n"
            text += f"üìç {event['location']}\n"
            text += f"üë• {event['current_attendees']}/{event['max_attendees']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="all_events"),
            types.InlineKeyboardButton("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register_event")
        )
        
        bot.reply_to(message, text, reply_markup=keyboard)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {str(e)}")

# Show partners
def show_partners(message):
    try:
        response = requests.get(f"{API_BASE}/partners")
        partners = response.json()
        
        if not partners:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.")
            return
        
        text = "ü§ù –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:\n\n"
        for partner in partners[:5]:  # Show first 5 partners
            text += f"üë§ {partner['name']}\n"
            text += f"üíº {partner['role']}\n"
            if partner.get('company'):
                text += f"üè¢ {partner['company']}\n"
            text += f"üìä {partner['projects_count']} –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n"
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", callback_data="become_partner"),
            types.InlineKeyboardButton("üìã –í—Å–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã", callback_data="all_partners")
        )
        
        bot.reply_to(message, text, reply_markup=keyboard)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {str(e)}")

# Show statistics
def show_statistics(message):
    try:
        response = requests.get(f"{API_BASE}/dashboard/stats")
        stats = response.json()
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Commercio:\n\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"üè™ –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {stats['total_shops']}\n"
        text += f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {stats['total_products']}\n"
        text += f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {stats['total_events']}\n"
        text += f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_revenue']:,.0f} UZS\n"
        text += f"üéØ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {stats['upcoming_events']}\n"
        
        bot.reply_to(message, text)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# Show profile
def show_profile(message):
    user_id = message.from_user.id
    
    try:
        response = requests.get(f"{API_BASE}/user/{user_id}")
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                text += f"üìù –ò–º—è: {user['name']}\n"
                text += f"üé≠ –†–æ–ª—å: {user['role']}\n"
                if user.get('email'):
                    text += f"üìß Email: {user['email']}\n"
                if user.get('phone'):
                    text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'][:10]}\n"
                
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_profile"),
                    types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
                )
                
                bot.reply_to(message, text, reply_markup=keyboard)
            else:
                bot.reply_to(message, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.reply_to(message, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")

# Show help
def show_help(message):
    help_text = """
‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Commercio

üè™ –ú–∞–≥–∞–∑–∏–Ω—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã - —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
üë§ –ü—Ä–æ—Ñ–∏–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º

–ö–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    
    bot.reply_to(message, help_text)

# Handle callback queries
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "register":
        start_registration(call.message)
    elif call.data == "search_shop":
        search_shop(call.message)
    elif call.data == "all_shops":
        show_all_shops(call.message)
    elif call.data == "all_events":
        show_all_events(call.message)
    elif call.data == "register_event":
        register_for_event(call.message)
    elif call.data == "become_partner":
        become_partner(call.message)
    elif call.data == "all_partners":
        show_all_partners(call.message)
    elif call.data == "edit_profile":
        edit_profile(call.message)
    elif call.data == "my_orders":
        show_my_orders(call.message)
    
    bot.answer_callback_query(call.id)

# Registration flow
def start_registration(message):
    user_state = get_user_state(message.from_user.id)
    user_state.state = "registration_name"
    user_state.data = {}
    
    bot.reply_to(message, "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Commercio\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "registration_name")
def handle_registration_name(message):
    user_state = get_user_state(message.from_user.id)
    user_state.data["name"] = message.text
    user_state.state = "registration_role"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"),
        types.KeyboardButton("–ü—Ä–æ–¥–∞–≤–µ—Ü"),
        types.KeyboardButton("–ü–∞—Ä—Ç–Ω–µ—Ä")
    )
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "registration_role")
def handle_registration_role(message):
    user_state = get_user_state(message.from_user.id)
    
    role_map = {
        "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å": "buyer",
        "–ü—Ä–æ–¥–∞–≤–µ—Ü": "seller", 
        "–ü–∞—Ä—Ç–Ω–µ—Ä": "partner"
    }
    
    if message.text not in role_map:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    user_state.data["role"] = role_map[message.text]
    user_state.state = "registration_password"
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "registration_password")
def handle_registration_password(message):
    if len(message.text) < 6:
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    user_state = get_user_state(message.from_user.id)
    user_state.data["password"] = message.text
    user_state.state = "registration_email"
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "registration_email")
def handle_registration_email(message):
    user_state = get_user_state(message.from_user.id)
    
    if message.text == "/skip":
        user_state.data["email"] = ""
    else:
        user_state.data["email"] = message.text
    
    user_state.state = "registration_phone"
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "registration_phone")
def handle_registration_phone(message):
    user_state = get_user_state(message.from_user.id)
    
    if message.text == "/skip":
        user_state.data["phone"] = ""
    else:
        user_state.data["phone"] = message.text
    
    # Complete registration
    complete_registration(message)

def complete_registration(message):
    user_state = get_user_state(message.from_user.id)
    user_data = user_state.data
    
    try:
        response = requests.post(f"{API_BASE}/user", json={
            "telegram_id": message.from_user.id,
            "name": user_data["name"],
            "role": user_data["role"],
            "password": user_data["password"],
            "email": user_data["email"],
            "phone": user_data["phone"]
        })
        
        if response.status_code == 201:
            bot.reply_to(message, 
                        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Commercio, {user_data['name']}!",
                        reply_markup=get_main_keyboard())
        else:
            error_data = response.json()
            if error_data.get("error") == "name taken":
                bot.reply_to(message, "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # Reset user state
        user_state.state = "main"
        user_state.data = {}
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        user_state.state = "main"
        user_state.data = {}

# Additional callback handlers
def search_shop(message):
    bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    get_user_state(message.from_user.id).state = "searching_shop"

def show_all_shops(message):
    try:
        response = requests.get(f"{API_BASE}/shops")
        shops = response.json()
        
        if not shops:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return
        
        text = "üè™ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã:\n\n"
        for i, shop in enumerate(shops, 1):
            text += f"{i}. {shop['name']}\n"
            if shop.get('description'):
                text += f"   {shop['description'][:50]}...\n"
            text += f"   ID: {shop['id']}\n\n"
        
        bot.reply_to(message, text)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {str(e)}")

def show_all_events(message):
    try:
        response = requests.get(f"{API_BASE}/events")
        events = response.json()
        
        if not events:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        
        text = "üìÖ –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for i, event in enumerate(events, 1):
            date = datetime.strptime(event['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
            text += f"{i}. {event['title']}\n"
            text += f"   üìÖ {date} –≤ {event['time']}\n"
            text += f"   üìç {event['location']}\n"
            text += f"   üë• {event['current_attendees']}/{event['max_attendees']}\n\n"
        
        bot.reply_to(message, text)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {str(e)}")

def register_for_event(message):
    bot.reply_to(message, "‚úÖ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Commercio –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")

def become_partner(message):
    bot.reply_to(message, "ü§ù –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π Commercio.")

def show_all_partners(message):
    try:
        response = requests.get(f"{API_BASE}/partners")
        partners = response.json()
        
        if not partners:
            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.")
            return
        
        text = "ü§ù –í—Å–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:\n\n"
        for i, partner in enumerate(partners, 1):
            text += f"{i}. {partner['name']}\n"
            text += f"   üíº {partner['role']}\n"
            if partner.get('company'):
                text += f"   üè¢ {partner['company']}\n"
            text += f"   üìä {partner['projects_count']} –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n"
        
        bot.reply_to(message, text)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {str(e)}")

def edit_profile(message):
    bot.reply_to(message, "‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Commercio.")

def show_my_orders(message):
    user_id = message.from_user.id
    
    try:
        response = requests.get(f"{API_BASE}/orders/{user_id}")
        if response.status_code == 200:
            orders = response.json()
            
            if not orders:
                bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
                return
            
            text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders[:5]:  # Show last 5 orders
                text += f"üõí –ó–∞–∫–∞–∑ #{order['id']}\n"
                text += f"üè™ {order.get('shop_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω')}\n"
                text += f"üí∞ {order['total_amount']:,.0f} UZS\n"
                text += f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                text += f"üìÖ {order['created_at'][:10]}\n\n"
            
            if len(orders) > 5:
                text += f"... –∏ –µ—â–µ {len(orders) - 5} –∑–∞–∫–∞–∑–æ–≤"
            
            bot.reply_to(message, text)
        else:
            bot.reply_to(message, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

# Handle shop search
@bot.message_handler(func=lambda message: get_user_state(message.from_user.id).state == "searching_shop")
def handle_shop_search(message):
    try:
        response = requests.get(f"{API_BASE}/shops")
        shops = response.json()
        
        search_term = message.text.lower()
        found_shops = [shop for shop in shops if search_term in shop['name'].lower()]
        
        if not found_shops:
            bot.reply_to(message, f"–ú–∞–≥–∞–∑–∏–Ω—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{message.text}':\n\n"
            for shop in found_shops:
                text += f"üè™ {shop['name']}\n"
                if shop.get('description'):
                    text += f"   {shop['description'][:50]}...\n"
                text += f"   ID: {shop['id']}\n\n"
            
            bot.reply_to(message, text)
        
        # Reset state
        get_user_state(message.from_user.id).state = "main"
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        get_user_state(message.from_user.id).state = "main"

# Error handler
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

# Run bot
if __name__ == "__main__":
    print("Commercio Bot started...")
    bot.polling(none_stop=True) 